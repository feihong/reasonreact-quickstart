// Generated by BUCKLESCRIPT VERSION 3.1.5, PLEASE EDIT WITH CARE

import * as $$Array from "bs-platform/lib/es6/array.js";
import * as Block from "bs-platform/lib/es6/block.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Random from "bs-platform/lib/es6/random.js";
import * as ReasonReact from "reason-react/src/ReasonReact.js";
import * as ApiClient$ReactTemplate from "./ApiClient.bs.js";

function str(prim) {
  return prim;
}

var component = ReasonReact.reducerComponent("Component2");

function getMode(mode) {
  if (mode === /* Either */2) {
    var match = Random.$$int(2);
    if (match !== 0) {
      return /* Emoji */1;
    } else {
      return /* Hanzi */0;
    }
  } else {
    return mode;
  }
}

function fetchSomething(self) {
  var mode = getMode(self[/* state */1][/* mode */1]);
  switch (mode) {
    case 0 : 
        return ApiClient$ReactTemplate.getHanzi((function (hanzi) {
                      return Curry._1(self[/* send */3], /* CharLoaded */Block.__(0, [hanzi[/* text */0]]));
                    }));
    case 1 : 
        return ApiClient$ReactTemplate.getEmoji((function (emoji) {
                      return Curry._1(self[/* send */3], /* CharLoaded */Block.__(0, [emoji[/* text */1]]));
                    }));
    case 2 : 
        return /* () */0;
    
  }
}

function make() {
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */(function (self) {
              return Curry._1(self[/* send */3], /* Fetch */0);
            }),
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function (self) {
              var changeModeOption = function (label, mode) {
                return React.createElement("option", {
                            onClick: (function () {
                                return Curry._1(self[/* send */3], /* ChangeMode */Block.__(1, [mode]));
                              })
                          }, label);
              };
              return React.createElement("div", undefined, React.createElement("select", undefined, changeModeOption("Hanzi", /* Hanzi */0), changeModeOption("Emoji", /* Emoji */1), changeModeOption("Either", /* Either */2)), React.createElement("button", {
                              className: "btn btn-primary btn-sm",
                              onClick: (function () {
                                  return Curry._1(self[/* send */3], /* Fetch */0);
                                })
                            }, "Generate"), React.createElement("div", {
                              className: "chars"
                            }, $$Array.map((function (ch) {
                                    return React.createElement("span", {
                                                key: ch
                                              }, ch);
                                  }), self[/* state */1][/* chars */0])));
            }),
          /* initialState */(function () {
              return /* record */[
                      /* chars : array */[],
                      /* mode : Either */2
                    ];
            }),
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */(function (action, state) {
              if (typeof action === "number") {
                return /* SideEffects */Block.__(1, [fetchSomething]);
              } else if (action.tag) {
                return /* Update */Block.__(0, [/* record */[
                            /* chars */state[/* chars */0],
                            /* mode */action[0]
                          ]]);
              } else {
                return /* Update */Block.__(0, [/* record */[
                            /* chars */$$Array.append(state[/* chars */0], /* array */[action[0]]),
                            /* mode */state[/* mode */1]
                          ]]);
              }
            }),
          /* subscriptions */component[/* subscriptions */13],
          /* jsElementWrapped */component[/* jsElementWrapped */14]
        ];
}

export {
  str ,
  component ,
  getMode ,
  fetchSomething ,
  make ,
  
}
/* component Not a pure module */

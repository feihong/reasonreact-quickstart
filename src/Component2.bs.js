// Generated by BUCKLESCRIPT VERSION 4.0.3, PLEASE EDIT WITH CARE

import * as Block from "bs-platform/lib/es6/block.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Printf from "bs-platform/lib/es6/printf.js";
import * as Random from "bs-platform/lib/es6/random.js";
import * as Belt_List from "bs-platform/lib/es6/belt_List.js";
import * as Belt_Array from "bs-platform/lib/es6/belt_Array.js";
import * as Belt_Option from "bs-platform/lib/es6/belt_Option.js";
import * as Js_mapperRt from "bs-platform/lib/es6/js_mapperRt.js";
import * as ReasonReact from "reason-react/src/ReasonReact.js";
import * as ApiClient$ReactTemplate from "./ApiClient.bs.js";

function str(prim) {
  return prim;
}

var jsMapperConstantArray = /* array */[
  /* tuple */[
    -659631771,
    "Either"
  ],
  /* tuple */[
    50782054,
    "Emoji"
  ],
  /* tuple */[
    894130468,
    "Hanzi"
  ]
];

function modeToJs(param) {
  return Js_mapperRt.binarySearch(3, param, jsMapperConstantArray);
}

function modeFromJs(param) {
  return Js_mapperRt.revSearch(3, jsMapperConstantArray, param);
}

var component = ReasonReact.reducerComponent("Component2");

function getMode(x) {
  if (x !== -659631771) {
    return x;
  } else {
    var match = Random.$$int(2);
    if (match !== 0) {
      return /* Emoji */50782054;
    } else {
      return /* Hanzi */894130468;
    }
  }
}

function make() {
  var event2Mode = function (evt) {
    var x = evt.target;
    return Belt_Option.getWithDefault(modeFromJs(x.value), /* Either */-659631771);
  };
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */(function (self) {
              return Curry._1(self[/* send */3], /* Fetch */0);
            }),
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function (param) {
              var send = param[/* send */3];
              var state = param[/* state */1];
              var modeOption = function (i, mode) {
                var label = modeToJs(mode);
                return React.createElement("option", {
                            key: String(i),
                            value: label
                          }, label);
              };
              return React.createElement("div", undefined, React.createElement("div", {
                              className: "form-inline"
                            }, React.createElement("select", {
                                  className: "form-control mr-2",
                                  value: modeToJs(state[/* mode */1]),
                                  onChange: (function (evt) {
                                      return Curry._1(send, /* ChangeMode */Block.__(1, [event2Mode(evt)]));
                                    })
                                }, Belt_Array.mapWithIndex(/* array */[
                                      /* Hanzi */894130468,
                                      /* Emoji */50782054,
                                      /* Either */-659631771
                                    ], modeOption)), React.createElement("button", {
                                  className: "btn btn-primary btn-sm mr-2",
                                  onClick: (function () {
                                      return Curry._1(send, /* Fetch */0);
                                    })
                                }, "Generate"), React.createElement("button", {
                                  className: "btn btn-primary btn-sm",
                                  onClick: (function () {
                                      return Curry._1(send, /* Clear */1);
                                    })
                                }, "Clear")), React.createElement("div", {
                              className: "chars"
                            }, Belt_List.toArray(Belt_List.mapWithIndex(state[/* chars */0], (function (i, cc) {
                                        return React.createElement("span", {
                                                    key: String(i),
                                                    title: cc[/* caption */1]
                                                  }, cc[/* text */0]);
                                      })))));
            }),
          /* initialState */(function () {
              return /* record */[
                      /* chars : [] */0,
                      /* mode : Either */-659631771
                    ];
            }),
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */(function (action, state) {
              if (typeof action === "number") {
                if (action === 0) {
                  return /* SideEffects */Block.__(1, [(function (self) {
                                var param = self;
                                var send = param[/* send */3];
                                var match = getMode(param[/* state */1][/* mode */1]);
                                if (match !== 50782054) {
                                  if (match !== 894130468) {
                                    return /* () */0;
                                  } else {
                                    return ApiClient$ReactTemplate.getHanzi((function (hanzi) {
                                                  return Curry._1(send, /* CharLoaded */Block.__(0, [/* record */[
                                                                  /* text */hanzi[/* text */0],
                                                                  /* caption */Curry._1(Printf.sprintf(/* Format */[
                                                                            /* String_literal */Block.__(11, [
                                                                                "Code point: ",
                                                                                /* Int */Block.__(4, [
                                                                                    /* Int_d */0,
                                                                                    /* No_padding */0,
                                                                                    /* No_precision */0,
                                                                                    /* End_of_format */0
                                                                                  ])
                                                                              ]),
                                                                            "Code point: %d"
                                                                          ]), hanzi[/* ordinal */1])
                                                                ]]));
                                                }));
                                  }
                                } else {
                                  return ApiClient$ReactTemplate.getEmoji((function (emoji) {
                                                return Curry._1(send, /* CharLoaded */Block.__(0, [/* record */[
                                                                /* text */emoji[/* text */1],
                                                                /* caption */Curry._2(Printf.sprintf(/* Format */[
                                                                          /* String */Block.__(2, [
                                                                              /* No_padding */0,
                                                                              /* String_literal */Block.__(11, [
                                                                                  " (",
                                                                                  /* String */Block.__(2, [
                                                                                      /* No_padding */0,
                                                                                      /* Char_literal */Block.__(12, [
                                                                                          /* ")" */41,
                                                                                          /* End_of_format */0
                                                                                        ])
                                                                                    ])
                                                                                ])
                                                                            ]),
                                                                          "%s (%s)"
                                                                        ]), emoji[/* shortname */0], emoji[/* category */2])
                                                              ]]));
                                              }));
                                }
                              })]);
                } else {
                  return /* Update */Block.__(0, [/* record */[
                              /* chars : [] */0,
                              /* mode */state[/* mode */1]
                            ]]);
                }
              } else if (action.tag) {
                return /* Update */Block.__(0, [/* record */[
                            /* chars */state[/* chars */0],
                            /* mode */action[0]
                          ]]);
              } else {
                return /* Update */Block.__(0, [/* record */[
                            /* chars : :: */[
                              action[0],
                              state[/* chars */0]
                            ],
                            /* mode */state[/* mode */1]
                          ]]);
              }
            }),
          /* jsElementWrapped */component[/* jsElementWrapped */13]
        ];
}

export {
  str ,
  modeToJs ,
  modeFromJs ,
  component ,
  getMode ,
  make ,
  
}
/* component Not a pure module */
